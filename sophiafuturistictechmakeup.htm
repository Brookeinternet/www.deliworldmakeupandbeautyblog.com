   <!--  sophiafuturistictechmakeup.html"Sophia's Futuristic Tech-Infused Makeup (Premium Content!) --> here 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title Sophia Futuristic Tech Makeup Look</title> <!-- 
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Firebase SDKs (using v10.12.0) -->
    <script type="module" src="https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js"></script>
    <script type="module" src="https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js"></script>
    <script type="module" src="https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
            line-height: 1.6;
            color: #334155;
        }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .gradient-bg { background: linear-gradient(to right, #fecaca, #fbcfe8); }
        .btn-primary {
            background-color: #ec4899;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            transition: background-color 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .btn-primary:hover { background-color: #db2777; }

        /* Styles for the lock overlay */
        .article-container {
            position: relative; /* Needed for absolute positioning of overlay */
            overflow: hidden; /* Hide overflow from blur */
            background-color: #fff;
            border-radius: 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 2rem;
        }
        .article-content-wrapper {
            transition: filter 0.3s ease-out, opacity 0.3s ease-out;
        }
        .article-lock-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.95); /* More opaque white overlay */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 10;
            text-align: center;
            padding: 20px;
            border-radius: 1rem;
            pointer-events: none; /* Allows interaction by default, will be changed by JS */
            opacity: 0; /* Hidden by default */
            transition: opacity 0.3s ease-out;
        }
        .article-content-wrapper.blurred {
            filter: blur(8px); /* Stronger blur when locked */
            pointer-events: none;
            user-select: none;
            opacity: 0.3; /* More dim when locked */
        }
        .article-lock-overlay.active {
            opacity: 1;
            pointer-events: auto; /* Enable interaction when active */
        }
    </style>
</head>
<body>

   
<h3 class="text-4xl font-bold text-gray-800 mb-6 text-center">Sophia's Futuristic Tech-Infused Makeup <span class="text-yellow-500 text-lg">(Premium Content!)</span></h3>
  <div class="article-content max-w-3xl mx-auto text-gray-700 vip-content" style="display:none;">
    <img src="https://i.imgur.com/vFf6BXE.jpeg" alt="Sophia Futuristic Tech Makeup Look" class="w-full h-auto object-cover rounded-lg mb-6">
    <p class="mb-6">
      Welcome to a new era of beauty, where innovation meets artistry! Sophia here, ready to guide you through creating a groundbreaking "Futuristic Tech-Infused Makeup Look." This style blends sharp, precise lines with luminous, almost digital finishes, giving you an avant-garde edge that's perfect for standing out in any crowd. Get ready to embrace the future of glam!
    </p>
    <h4 class="text-2xl font-semibold text-pink-600 mb-4">Step 1: The High-Definition Base</h4>
    <p class="mb-4">
      Achieving a futuristic look begins with a flawless, almost airbrushed canvas. Opt for a long-wearing, full-coverage foundation that provides a smooth, uniform finish. Apply it with a dampened beauty sponge or a dense buffing brush for seamless blending. Conceal any imperfections with precision, ensuring no redness or dark circles peek through. Set your base with a finely milled translucent powder, focusing on your T-zone, for a pristine, almost porcelain-like effect.
    </p>
    <h4 class="text-2xl font-semibold text-pink-600 mb-4">Step 2: Sculpted Contours & Cybernetic Glow</h4>
    <p class="mb-4">
      Instead of soft contours, think sharp and defined. Use a cool-toned contour shade to chisel out your cheekbones, jawline, and nose. Blend thoroughly but keep the lines precise. The real magic comes with the highlighter. Choose an iridescent, multi-chrome, or holographic highlighter. Apply it generously to the high points of your cheekbones, brow bone, and Cupid's bow. This creates a captivating, almost alien glow that shifts with every movement.
    </p>
    <img src="https://i.imgur.com/DHXbTWX.jpeg" alt="Cybernetic Glow and Contour" class="w-full h-auto object-cover rounded-lg mb-6">
    <h4 class="text-2xl font-semibold text-pink-600 mb-4">Step 3: The Graphic Eye Blueprint</h4>
    <p class="mb-4">
      The eyes are the focal point of this tech-infused look. Using a crisp, highly pigmented liquid eyeliner (black or white works beautifully, but metallics or neon shades can add extra flair), draw a precise graphic liner. Experiment with floating creases, double wings, or sharp angular shapes. Precision is paramount here; clean lines define the futuristic aesthetic.
    </p>
    <h4 class="text-2xl font-semibold text-pink-600 mb-4">Step 4: Luminous Lids & Digital Details</h4>
    <p class="mb-4">
      On the eyelids, opt for metallic cream shadows, iridescent loose pigments, or finely milled pressed glitters. Choose shades that reflect light dramatically, such as chrome silver, electric blue, or shifting purples. Apply these with a flat brush or your fingertip for maximum impact. For an added tech detail, consider applying small, self-adhesive cosmetic gems or tiny metallic decals in strategic patterns, like alongside your liner or beneath your brow bone.
    </p>
    <h4 class="text-2xl font-semibold text-pink-600 mb-4">Step 5: Minimalist Lips, Maximum Impact</h4>
    <p class="mb-4">
      To balance the complexity of the eyes and highlight, keep the lips relatively simple but impactful. A nude liquid lipstick with a metallic finish, a clear gloss with iridescent glitter, or a sheer lip balm with a holographic topper will complement the look without competing. The aim is a plump, futuristic pout that catches light subtly.
    </p>
    <h4 class="text-2xl font-semibold text-pink-600 mb-4">Step 6: Hair & Accessories Integration</h4>
    <p class="mb-4">
      To truly embody the futuristic vibe, consider integrating your hair and accessories. Slicked-back hairstyles, futuristic hair clips, or even subtle holographic hair glitter can tie the whole look together. Pair with minimalist, geometric jewelry or clothing with metallic accents to complete your transformation.
    </p>
    <p class="text-lg text-gray-700 mt-8 text-center font-semibold">
      This look is all about precision, light reflection, and a daring embrace of the unconventional. Have fun pushing the boundaries of beauty!
    </p>


            <!-- The Lock Overlay -->
            <div id="article-lock-overlay" class="article-lock-overlay">
                <svg class="w-16 h-16 mb-4 text-pink-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 15v2m0 0v2m-6-2a6 6 0 1112 0v2a2 2 0 01-2 2H8a2 2 0 01-2-2v-2z" />
                </svg>
                <p id="lock-message" class="text-xl font-semibold text-gray-800 mb-4">Content Locked</p>
                <p id="lock-subtext" class="text-lg text-gray-600 mb-6 text-center">
                    Please log in or upgrade your membership to view this exclusive content.
                </p>
                <a id="lock-cta-button" href="../#premium-plans-section" class="btn-primary">View Plans & Unlock</a>
                <button id="login-from-article-btn" class="text-pink-500 hover:underline mt-4">Already a member? Log In</button>
            </div>
        </div>
    </main>

    <!-- Login Modal (duplicate from main app, necessary for standalone page) -->
    <div id="loginModal" class="modal-overlay hidden">
      <div class="modal-content w-full max-w-md">
        <h2 class="text-2xl font-bold mb-4 text-center">Log In</h2>
        <input type="email" id="loginEmail" placeholder="Email" class="w-full mb-4 p-2 border rounded" />
        <input type="password" id="loginPassword" placeholder="Password" class="w-full mb-4 p-2 border rounded" />
        <button id="login-button" class="btn-primary w-full">Log In</button>
        <button class="modal-close-btn bg-gray-300 text-gray-800 hover:bg-gray-400" id="login-cancel-btn">Cancel</button>
      </div>
    </div>

    <!-- Custom Message Modal (duplicate from main app, necessary for standalone page) -->
    <div id="messageModal" class="modal-overlay hidden">
      <div class="modal-content">
        <p id="messageText" class="text-lg text-gray-700 mb-4"></p>
        <button class="modal-close-btn" id="message-ok-btn">OK</button>
      </div>
    </div>


    <script type="module">
        // Firebase initialization (duplicate from main app, necessary for standalone page)
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
        import {
            getAuth,
            signInWithEmailAndPassword,
            onAuthStateChanged,
            signInAnonymously,
            signInWithCustomToken
        } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
        import { getFirestore, doc, getDoc } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyBDeFd1HMO3rQfJu5JzqKXkzq-Oz68dQDk",
            authDomain: "deli-sworld-subscription.firebaseapp.com",
            projectId: "deli-sworld-subscription",
            storageBucket: "deli-sworld-subscription.firebasestorage.app",
            messagingSenderId: "678490444860",
            appId: "1:678490444860:web:3294be895f8033e7d01f39",
            measurementId: "G-4T8CL2174E"
        };
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Function to display custom messages (replaces alert())
        function showMessage(message) {
            document.getElementById("messageText").textContent = message;
            document.getElementById("messageModal").style.display = "flex";
        }

        // Function to handle user login from article page
        async function handleLoginFromArticle() {
            const email = document.getElementById("loginEmail").value;
            const password = document.getElementById("loginPassword").value;

            try {
                await signInWithEmailAndPassword(auth, email, password);
                showMessage("Logged in successfully!");
                document.getElementById("loginModal").style.display = "none"; // Hide modal
                // Access check will run automatically via onAuthStateChanged
            } catch (error) {
                showMessage("Login failed: " + error.message);
                console.error("Login error:", error);
            }
        }

        // Function to fetch user's subscription status from Firestore
        async function getUserSubscriptionTier(uid) {
            if (!uid) return 'free';

            try {
                const userDocRef = doc(db, `artifacts/${appId}/users/${uid}`);
                const userDocSnap = await getDoc(userDocRef);

                if (userDocSnap.exists()) {
                    const userData = userDocSnap.data();
                    return userData.subscriptionTier || 'free';
                }
                return 'free';
            } catch (error) {
                console.error("Error fetching user subscription tier:", error);
                return 'free';
            }
        }

        /**
         * Checks if the current user has access to the article based on their tier.
         * @param {string} currentUserTier - The current user's subscription tier ('free', 'basic', 'vip').
         * @param {string} requiredTier - The tier required for this specific article ('free', 'basic', 'vip').
         * @returns {boolean} True if the user has access, false otherwise.
         */
        function hasAccess(currentUserTier, requiredTier) {
            if (requiredTier === 'free') {
                return true; // Free articles are always accessible
            }
            if (requiredTier === 'basic') {
                return currentUserTier === 'basic' || currentUserTier === 'vip';
            }
            if (requiredTier === 'vip') {
                return currentUserTier === 'vip';
            }
            return false; // Fallback
        }

        // Main function to control article visibility
        async function checkArticleAccess() {
            // IMPORTANT: Set the required tier for *THIS* specific article.
            // Replace 'free' with 'basic' or 'vip' as appropriate for this HTML file.
            const requiredTier = 'vip'; // <<< UPDATED TO VIP FOR DEMONSTRATION OF VIP LOCK

            const articleContentWrapper = document.getElementById('article-content-wrapper');
            const articleLockOverlay = document.getElementById('article-lock-overlay');
            const lockMessageElement = document.getElementById('lock-message');
            const lockSubtextElement = document.getElementById('lock-subtext');
            const lockCtaButton = document.getElementById('lock-cta-button');
            const loginFromArticleBtn = document.getElementById('login-from-article-btn');


            if (!articleContentWrapper || !articleLockOverlay || !lockMessageElement || !lockSubtextElement || !lockCtaButton || !loginFromArticleBtn) {
                console.error("Required elements for access control not found.");
                return;
            }

            const user = auth.currentUser;
            let currentTier = 'free';

            if (user) {
                currentTier = await getUserSubscriptionTier(user.uid);
            } else {
                // If no user and no custom token from Canvas environment, default to free and don't try anonymous sign-in here
                // This prevents the auth/admin-restricted-operation error if anonymous auth is not enabled.
                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    try {
                        await signInWithCustomToken(auth, __initial_auth_token);
                        // onAuthStateChanged will be triggered upon successful sign-in
                    } catch (error) {
                        console.warn("Custom token sign-in failed on article page. Proceeding as unauthenticated.", error);
                    }
                }
                // If no user or custom token, currentTier remains 'free'
            }
            
            // Re-fetch tier after potential custom token sign-in if initial check was 'free'
            // This is crucial because custom token sign-in is async and onAuthStateChanged might not have fired yet
            // when checkArticleAccess is called initially on DOMContentLoaded.
            const actualUser = auth.currentUser;
            if (actualUser && currentTier === 'free') { 
                 currentTier = await getUserSubscriptionTier(actualUser.uid);
            }


            if (hasAccess(currentTier, requiredTier)) {
                // User has access: show content, hide lock
                articleContentWrapper.classList.remove('blurred');
                articleLockOverlay.classList.remove('active');
                articleLockOverlay.style.display = 'none'; // Ensure it's hidden
            } else {
                // User does NOT have access: blur content, show lock
                articleContentWrapper.classList.add('blurred');
                articleLockOverlay.classList.add('active');
                articleLockOverlay.style.display = 'flex'; // Ensure it's visible

                lockCtaButton.style.display = 'block'; // Show CTA button by default
                loginFromArticleBtn.style.display = 'block'; // Show login button by default

                if (!user) { // User is not logged in
                    lockMessageElement.textContent = "Content Locked";
                    lockSubtextElement.textContent = "Please log in or upgrade your membership to view this exclusive content.";
                    lockCtaButton.textContent = "View Plans & Unlock";
                } else if (requiredTier === 'vip' && currentTier === 'basic') {
                    // User is Basic, but VIP content is required
                    lockMessageElement.textContent = "VIP Content Locked";
                    lockSubtextElement.textContent = "This article is for VIP members only. Upgrade your plan to unlock it!";
                    lockCtaButton.textContent = "Upgrade to VIP";
                    loginFromArticleBtn.style.display = 'none'; // Hide login button if already logged in (as Basic)
                } else if (requiredTier === 'basic' && currentTier === 'free') {
                    // User is Free, but Basic content is required
                    lockMessageElement.textContent = "Basic Content Locked";
                    lockSubtextElement.textContent = "This article is for Basic or VIP members. Upgrade your plan to unlock it!";
                    lockCtaButton.textContent = "Upgrade to Basic";
                } else {
                    // Fallback for other scenarios, though main cases are covered
                    lockMessageElement.textContent = "Content Locked";
                    lockSubtextElement.textContent = "Access denied. Please check your membership status.";
                    lockCtaButton.textContent = "View Plans";
                }
            }
        }

        // Listen for auth state changes to re-check access
        onAuthStateChanged(auth, async (user) => {
            // When auth state changes, re-evaluate access
            await checkArticleAccess();
            // Also handle showing/hiding login modal if triggered from link
            if (user) {
                document.getElementById('loginModal').style.display = 'none';
            }
        });

        // Event listeners for login modal (on article page)
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('login-from-article-btn').addEventListener('click', () => {
                document.getElementById('loginModal').style.display = 'flex';
            });
            document.getElementById('login-button').addEventListener('click', handleLoginFromArticle);
            document.getElementById('login-cancel-btn').addEventListener('click', () => {
                document.getElementById('loginModal').style.display = 'none';
            });
            document.getElementById('message-ok-btn').addEventListener('click', () => {
                document.getElementById('messageModal').style.display = 'none';
            });

            // Initial check when page loads
            checkArticleAccess();
        });
    </script>
</body>
</html>
